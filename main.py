s1 = "Spam"
s2 = "eggs"
name = "Marlem"
Q = '1,4,6,7'
last_name = "Madara"
middle_name = "Madara"
full_name_ = name + ' ' + last_name * 1
i1 = 1222222
my_str = 'Discworld string'
str5 = "приведен действительный строковый пример"
str1 = "\t "
S = "MaDaRaFaGi and ItacHi  UcHIha NarutafaGI"
A = ['orange', 'watermelon', 'pear', 'banana', 'kiwi', 'apple', 'melon']
W = '123456789'
string = "some money, dropping all my money"
a = "helloJogn"
new_string = string.center(41, '$')

if name == '__main__':
    print(s1 + s2)
print(full_name_ + " " + last_name)
print(type(i1))

print('Dis' in my_str)
print(S[1:3])
print(str5.find('дей'))  # Поиск подстроки в строке. Возвращает номер первого вхождения или -1
print(str5.rfind('пример'))  # Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
print(A.index('apple', 2))  # Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueErrorpr
print(A.index('watermelon'))  # Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
print(my_str.replace('bar', 'pear'))  # Замена шаблона на замену. maxcount ограничивает количество замен
print(Q.split(','))  # Разбиение строки по разделителю
print(W.isdigit())  # Состоит ли строка из цифр
print(S.isalpha())  # Состоит ли строка из букв
print(W.isalnum())  # Состоит ли строка из цифр или букв
print(str1.isupper())  # остоит ли строка из символов в верхнем регистре
print(
    str1.isspace())  # Состоит ли строка из неотображаемых символов (пробел, символ перевода страницы ('\f'), "новая строка" ('\n'), "перевод каретки" ('\r'), "горизонтальная табуляция" ('\t') и "вертикальная табуляция" ('\v'))
print(S.istitle())  # Начинаются ли слова в строке с заглавной буквы
print(S.upper())  # Преобразование строки к верхнему регистру
print(S.lower())  # Преобразование строки к нижнему регистру
print(my_str.startswith('Dis'))  # Начинается ли строка S с шаблона str
print(my_str.endswith('world'))  # Заканчивается ли строка S шаблоном str
print('$'.join(str5))  # Сборка строки из списка с разделителем S
print(ord('m'))  # Символ в его код ASCII
print(chr(109))  # Код ASCII в символ
print(S.capitalize())  # Переводит первый символ строки в верхний регистр, а все остальные в нижний
print("Centered String: ",
      new_string)  # Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)
print(
    S.expandtabs())  # Возвращает копию строки, в которой все символы табуляции заменяются одним или несколькими пробелами, в зависимости от текущего столбца, размер табуляции полагается равным 8 пробелам
print(string.lstrip('some'))  # Удаление пробельных символов в начале строки
print(string.rsplit('money'))  # Удаление пробельных символов в начале и в конце строки
print(S.partition('Itachi'))  # Возвращает кортеж, содержащий часть перед первым шаблоном,
print(W.rpartition('.'))  # Возвращает кортеж, содержащий часть перед последним шаблоном
print(S.swapcase())  # Переводит символы нижнего регистра в верхний, а верхнего – в нижний
print(S.title())  # Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
print(a.zfill(13))  # Делает длину строки не меньшей width, по необходимости заполняя первые символы нулями
print(a.ljust(15, '@'))  # Делает длину строки не меньшей width, по необходимости заполняя последние символы символом fillchar
print(a.rjust(10,'!')) #  Делает длину строки не меньшей width, по необходимости заполняя первые символы символом fillchar
print(W.format('a', 'd' , 's'))   #  Форматирование строки